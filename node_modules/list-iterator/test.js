var assert = require('assert');
var ListIterator = require('./index.js');

describe('Array', function () {
  function NoSuchElementException () {
    return 'No more elements in iteration';
  }

  function IllegalStateException () {
    return 'Neither next() nor previous() have been called, or ' +
      'remove() or add() have been called after the last call to next() ' +
      'or previous()';
  }

  describe('#hasNext', function () {
    it('should return true when there is next element in iteration', function () {
      var iterator = new ListIterator(['a']);
      assert.equal(true, iterator.hasNext());
    });

    it('should return false when there is no more elements in iteration', function () {
      var iterator = new ListIterator([]);
      assert.equal(false, iterator.hasNext());
    });
  });

  describe('#next', function () {
    it('should return next element of list', function() {
      var iterator = new ListIterator(['a', 'b', 'c']);
      assert.equal('a', iterator.next());
      assert.equal('b', iterator.next());
      assert.equal('c', iterator.next());
    });

    it('should throw error when there is no more elements in iteration', function () {
      var iterator = new ListIterator(['a', 'b']);
      assert.throws(function () {
        while (iterator.hasNext()) {
          iterator.next();
        }
        iterator.next();
      }, Error, NoSuchElementException());
    });

    it('should return same element after alternating calls to next() and previous()', function () {
      var iterator = new ListIterator(['a', 'b', 'c']);
      iterator.next();
      var result = '';
      result += iterator.next();
      result += iterator.previous();
      assert.equal('bb', result);
    });
  });

  describe('#hasPrevious', function () {
    it('should return true when there is previous element in iteration', function () {
      var iterator = new ListIterator(['a']);
      iterator.next();
      assert.equal(true, iterator.hasPrevious());
    });

    it('should return false when there is no more elements in iteration', function () {
      var iterator = new ListIterator([]);
      assert.equal(false, iterator.hasPrevious());
    });
  });

  describe('#previous', function () {
    it('should return previous element of list', function() {
      var iterator = new ListIterator(['a', 'b', 'c']);
      while (iterator.hasNext()) {
        iterator.next();
      }
      assert.equal('c', iterator.previous());
      assert.equal('b', iterator.previous());
      assert.equal('a', iterator.previous());
    });

    it('should throw error when there is no more elements in iteration', function () {
      var iterator = new ListIterator(['a', 'b']);
      assert.throws(function () {
        iterator.next();
        iterator.next();
        iterator.previous();
        iterator.previous();
        iterator.previous();
      }, Error, NoSuchElementException());
    });

    it('should return same element after alternating calls to next() and previous()', function () {
      var iterator = new ListIterator(['a', 'b', 'c']);
      iterator.next();
      var result = '';
      result += iterator.next();
      result += iterator.previous();
      assert.equal('bb', result);
    });
  });

  describe('#nextIndex', function () {
    it('should return index of next element', function () {
      var iterator = new ListIterator(['a', 'b', 'c']);
      assert.equal(0, iterator.nextIndex());
    });

    it('should return list size if the list iterator is at the end of the list', function () {
      var iterator = new ListIterator(['a', 'b', 'c']);
      while (iterator.hasNext()) {
        iterator.next();
      }
      assert.equal(3, iterator.nextIndex());
    });

    it('should return 0 if list is empty', function () {
      var iterator = new ListIterator([]);
      assert.equal(0, iterator.nextIndex());
    });
  });

  describe('#previousIndex', function () {
    it('should return index of previous element', function () {
      var iterator = new ListIterator(['a', 'b', 'c']);
      iterator.next();
      iterator.next();
      assert.equal(1, iterator.previousIndex());
    });

    it('should return -1 if the list iterator is at the beginning of the list', function () {
      var iterator = new ListIterator(['a', 'b', 'c']);
      assert.equal(-1, iterator.previousIndex());
    });

    it('should return -1 if list is empty', function () {
      var iterator = new ListIterator([]);
      assert.equal(-1, iterator.previousIndex());
    });
  });

  describe('#remove', function () {
    it('should remove the last element that was returned by next() or previous()', function () {
      var iterator = new ListIterator(['a', 'b', 'c']);
      iterator.next();
      iterator.next();
      iterator.remove();
      assert.equal(['a', 'c'].toString(), iterator.array);
    });

    it('should throw error if called before next() or previous()', function () {
      var iterator = new ListIterator(['a']);
      assert.throws(function () {
        iterator.remove();
      }, Error, IllegalStateException());
    });

    it('should throw error if called more than once per call to next() or previous()', function () {
      var iterator = new ListIterator(['a', 'b']);
      assert.throws(function () {
        iterator.next();
        iterator.next();
        iterator.remove();
        iterator.remove();
      }, Error, IllegalStateException());
    });

    it('should throw error if list is empty', function () {
      var iterator = new ListIterator([]);
      assert.throws(function () {
        iterator.remove();
      }, Error);
    });

    it('should throw error if called after add()', function () {
      var iterator = new ListIterator(['b', 'c']);
      assert.throws(function () {
        iterator.add('a');
        iterator.remove();
      }, Error, IllegalStateException());
    });
  });

  describe('#set', function () {
    it('should replace the last element returned by next() or previous()', function () {
      var iterator = new ListIterator(['a', 'b']);
      iterator.next();
      iterator.set(1);
      iterator.next();
      iterator.set(2);
      assert.equal([1, 2].toString(), iterator.array);
    });

    it('should throw error if called before next() or previous()', function () {
      var iterator = new ListIterator([]);
      assert.throws(function () {
        iterator.set('a');
      }, Error, IllegalStateException());
    });

    it('should throw error if called after add()', function () {
      var iterator = new ListIterator([]);
      assert.throws(function () {
        iterator.add('a');
        iterator.set('b');
      }, Error, IllegalStateException());
    });

    it('should throw error if called after remove()', function () {
      var iterator = new ListIterator(['a']);
      assert.throws(function () {
        iterator.next();
        iterator.remove();
        iterator.set('b');
      }, Error, IllegalStateException());
    });
  });

  describe('#add', function () {
    it('should add new element if list contains no elements', function () {
      var iterator = new ListIterator([]);
      iterator.add('a');
      assert.equal(['a'].toString(), iterator.array);
    });

    it('should add element before the element that would be returned by next()', function () {
      var iterator = new ListIterator(['a', 'c']);
      iterator.next();
      iterator.add('b');
      assert.equal(['a', 'b', 'c'].toString(), iterator.array);
    });

    it('should add multiple in a row', function () {
      var iterator = new ListIterator(['a', 'b', 'c']);
      iterator.next();
      iterator.add('x');
      iterator.add('y');
      iterator.add('z');
      assert.equal(['a', 'x', 'y', 'z', 'b', 'c'].toString(), iterator.array);
    });

    it('should not affect a subsequent call to next()', function () {
      var iterator = new ListIterator(['a', 'b']);
      iterator.next();
      iterator.add('x');
      assert.equal('b', iterator.next());
    });

    it('should return new element after a subsequent call to previous()', function () {
      var iterator = new ListIterator(['a', 'b']);
      iterator.next();
      iterator.add('x');
      assert.equal('x', iterator.previous());
    });
  });
});
